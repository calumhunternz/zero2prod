Cargo watch command: cargo watch -x check -x test -x run
linter: cargo clippy -- -D warnings
formatter: cargo fmt -- --check
security audit: cargo audit

Tests:
Integration tests are typically added to there own external tests folder
Unit tests are are typically in an embedded test module in the project

run tests: cargo test
if tracing is setup how it is in this project then use: TEST_Log=true cargo test | bunyan
to get logs in tests

Extractors
Extractors intercept incoming requests to handlers and and extract data
from them to perform various tasks. If all extractors complete without
an error only then in the handler ran
e.g. web::form<T> is an extractor that takes the form data and converts
it into the concrete type T for use in the handler so there is no need
to manually process it yourself. If T derives serde deserialise it will
then appropriatly handle bad requests without the need to handling it
explicitly. 

Tracing
Tracing is basically a better logging. The power of it comes from 
propagating context. For example in a function that takes a request and
does some database query if you logged you would need to have a request
id then re-use it in each log for the request. With tracing you have
spans. Which are basically reference to each part of that function
e.g. request span (the whole function) and query span (only the part of
the function that does the query). The query span is part of the request
span so it is a child. So by adding context to the parent (request span)
with data such as request id. That id is then propagated to the child
span. Meaning all traces for the query span have the added context of
request id without needing to explicitly specify it.
(This definetly is a rudementary understanding but this part alone blew
my mind a little when first learning)

cargo-udeps: cargo tool to scan and dependencies and see if they are 
unused in projects (there by cutting down compilation time) 
- Not using for this project because it requires nightly at the time 
  of writing this but is a cool tool to know about.

running migrations:
sqlx migrate add <NAME_OF_MIGRATION>
SKIP_DOCKER=true ./scripts/init_db.sh

Migrate remote database: DATABASE_URL=<remote-connection-string> sqlx migrate run

A rule of thumb: Log the error when it is handled not when it is propogated (Unless it can provide more context)